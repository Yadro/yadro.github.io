{"version":3,"sources":["components/help.tsx"],"names":[],"mappings":";;;;;;;IAGA,IAAM,IAAI,GAAG,CACT,qBAAC,GAAG,SACA,qBAAC,EAAE,qEAA+D,EAClE,qBAAC,GAAG,SACA,qBAAC,EAAE,wBAAkB,EACrB,qBAAC,EAAE,SACC,qBAAC,EAAE,4GAAsG,EACzG,qBAAC,EAAE,qEAA+D,EAClE,qBAAC,EAAE,sEAAgE,EACnE,qBAAC,EAAE,qEAA6D,EAChE,qBAAC,EAAE,qFAAyE,qBAAC,MAAM,gBAAc,MAAM,EACvG,qBAAC,EAAE,qCAAyB,qBAAC,MAAM,gBAAc,6FAA6F,EAC9I,qBAAC,EAAE,8DAAkD,qBAAC,MAAM,IAAC,OAAO,EAAE,cAAM,OAAA,QAAQ,CAAC,MAAM,EAAE,EAAjB,CAAkB,OAAW,CAAK,CAC7G,EACL,qBAAC,EAAE,oCAA8B,EACjC,qBAAC,EAAE,SACC,qBAAC,EAAE,wFAAkF,EACrF,qBAAC,EAAE,wEAA4D,qBAAC,MAAM,gBAAc,MAAM,EAC1F,qBAAC,EAAE,SAAC,qBAAC,MAAM,gBAAc,mCAAmC,CAC3D,EACL,qBAAC,EAAE,kDAA4C,EAC/C,qBAAC,IAAI,8DAAkD,qBAAC,MAAM,oBAAkB,MAAQ,EAAA,qBAAC,EAAE,QAAE,EAC7F,qBAAC,IAAI,iDAAqC,qBAAC,MAAM,yBAAuB,4BAA8B,CACpG,CACJ,CACT,CAAC;IAEF;QAAkC,wBAAyB;QACvD,cAAY,KAAK;YACb,kBAAM,KAAK,CAAC,CAAC;YACb,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,CAAC,KAAK,GAAG;gBACT,IAAI,EAAE,KAAK;aACd,CAAA;QACL,CAAC;QAED,sBAAO,GAAP;YACI,IAAI,CAAC,QAAQ,CAAC,EAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAC,CAAC,CAAC;QAC5C,CAAC;QAED,qBAAM,GAAN;YACI,MAAM,CAAC,CACH,qBAAC,GAAG,SACA,qBAAC,CAAC,IAAC,OAAO,EAAE,IAAI,CAAC,OAAQ,EAAC,IAAI,EAAC,GAAG,GAAE,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,GAAI,UAAS,EACxE,IAAI,CAAC,KAAK,CAAC,IAAI;gBACZ,qBAAC,GAAG,SAAE,IAAK,CAAM,GAAE,IAAK,EAC5B,qBAAC,EAAE,QAAE,EAAA,qBAAC,EAAE,QAAE,CACR,CACT,CAAA;QACL,CAAC;QACL,WAAC;IAAD,CAvBA,AAuBC,CAvBiC,KAAK,CAAC,SAAS,GAuBhD;IAvBD;0BAuBC,CAAA","file":"components/help.js","sourcesContent":["\r\nimport * as React from 'react';\r\n\r\nconst text = (\r\n    <div>\r\n        <h2>Решение задачи линейного программирования. Симплекс метод</h2>\r\n        <div>\r\n            <h4>Ввод данных:</h4>\r\n            <ul>\r\n                <li>Сначала вводится число коэффициентов полинома(включая свободный член) и число граничных условий.</li>\r\n                <li>Затем вводятся коэффициенты полинома и граничных условий.</li>\r\n                <li>Коэффициенты могут быть целочисленными либо рациональными.</li>\r\n                <li>Пример ввода рационального числа: \"-1/2\" (без ковычек).</li>\r\n                <li>После того как все данные были введены, можно начать вычисления кнопкой <button>calc</button>.</li>\r\n                <li>После нажатия на кнопку <button>calc</button>, введенные данные сохраняются в браузере и восстанавливаются после обновления страницы.</li>\r\n                <li>Для очистки решения нужно перезагрузить страницу <button onClick={() => location.reload()}>↺</button></li>\r\n            </ul>\r\n            <h4>Выбор опорного элемента:</h4>\r\n            <ul>\r\n                <li>Выбор опорного элемента осуществляется кликом по нужному значению в матрице.</li>\r\n                <li>Для автоматического выбора опорного элемента, нужно нажать <button>next</button>.</li>\r\n                <li><button>back</button> возвращает на предыдущий шаг.</li>\r\n            </ul>\r\n            <h3>Сохранение в файл и загрузка из файла.</h3>\r\n            <span>Введенные данные сохраняются по нажатию на кнопку<button>download</button>.</span><br/>\r\n            <span>Для загрузки данных нужно нажать на <button>Выберите файл</button> и выбрать нужный файл.</span>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default class Help extends React.Component<any, any> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.state = {\r\n            show: false\r\n        }\r\n    }\r\n\r\n    onClick() {\r\n        this.setState({show: !this.state.show});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <a onClick={this.onClick} href=\"#\">{this.state.show ? '-' : '+'} help</a>\r\n                {this.state.show ?\r\n                    <div>{text}</div>: null}\r\n                <br/><br/>\r\n            </div>\r\n        )\r\n    }\r\n}"],"sourceRoot":"/source/"}