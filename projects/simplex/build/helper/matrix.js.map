{"version":3,"sources":["helper/matrix.tsx"],"names":[],"mappings":"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","file":"helper/matrix.js","sourcesContent":["///<reference path=\"../../typings/index.d.ts\"/>\r\n///<reference path=\"fraction.js.d.ts\"/>\r\n\r\nimport * as React from 'react';\r\nimport Fraction = require('fraction');\r\nimport {FractionType} from './fraction.js';\r\nimport {arrayHas, copyArr} from './tools';\r\n\r\n\r\nexport type FractMatrix = FractionType[][];\r\n\r\ninterface MatrixOperation {\r\n    matrix;\r\n    operation;\r\n}\r\n\r\nclass DebugMatrix {\r\n\r\n    log: {\r\n        info: string | Function;\r\n        matrix: MatrixM;\r\n    }[] = [];\r\n\r\n    add(info: string | Function, matrix?: MatrixM) {\r\n        let obj;\r\n        if (matrix) {\r\n            obj = {\r\n                info,\r\n                matrix\r\n            }\r\n        } else {\r\n            obj = {info};\r\n        }\r\n        this.log.push(obj);\r\n    }\r\n\r\n    past(m: MatrixM) {\r\n        this.log[this.log.length - 1].matrix = m;\r\n    }\r\n}\r\n\r\nfunction arrFractionToStr(arr: FractionType[]) {\r\n    let str = arr.reduce((pr: string, e: FractionType) => pr + \", \" + e.toFraction());\r\n    return `(${str})`;\r\n}\r\n\r\nfunction copyMatrix(matr) {\r\n    let matrix = [];\r\n\r\n    matr.forEach((row, i) => {\r\n        matrix.push([]);\r\n        row.forEach(el => {\r\n            matrix[i].push(el);\r\n        });\r\n    });\r\n    return matrix;\r\n}\r\n\r\nexport class MatrixM {\r\n    width: number;\r\n    height: number;\r\n    matrix: FractionType[][];\r\n    debugMatrix: DebugMatrix;\r\n\r\n\r\n    constructor(matrix: FractionType[][] | number[][]) {\r\n        if (!matrix[0].length) {\r\n            throw new Error('matrix is not correct')\r\n        }\r\n        this.matrix = [];\r\n        if (typeof matrix[0][0] != \"object\") {\r\n            for (let i = 0; i < matrix.length; i++) {\r\n                this.matrix.push(copyArr<FractionType>(matrix[i], (el) => new Fraction(el)));\r\n            }\r\n        } else {\r\n            for (let i = 0; i < matrix.length; i++) {\r\n                this.matrix.push(copyArr<FractionType>(matrix[i], (el) => el.clone()));\r\n            }\r\n        }\r\n        this.height = matrix.length;\r\n        this.width = matrix[0].length;\r\n    }\r\n    \r\n    getElem(y, x) {\r\n        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\r\n            throw new Error('Index out of bounds');\r\n        }\r\n        return this.matrix[y][x];\r\n    }\r\n\r\n    getRow(row): FractionType[] {\r\n        if (row > this.height - 1) throw new Error('getRow index out of bound');\r\n        return this.matrix[row];\r\n    }\r\n\r\n    getCol(col): FractionType[] {\r\n        if(col > this.width - 1) throw new Error('getCol index out of bound');\r\n        let vec = [];\r\n        for (var i = 0; i < this.height; i++) {\r\n            vec.push(this.matrix[i][col]);\r\n        }\r\n        return vec;\r\n    }\r\n\r\n    addRow(row: number, vec: FractionType[], k?: FractionType) {\r\n        if (row >= this.height) {\r\n            throw new Error('Index out of bounds');\r\n        }\r\n        if (vec.length != this.width) {\r\n            console.warn(`Length are not equal`);\r\n        }\r\n\r\n        if (k) {\r\n            vec = vec.map(v => v.mul(k));\r\n        }\r\n        for (let i = 0, l = Math.min(this.width, vec.length); i < l; i++) {\r\n            this.matrix[row][i] = this.matrix[row][i].add(vec[i]);\r\n        }\r\n    }\r\n\r\n    addColumn(col: number, vec: FractionType[], k?: FractionType) {\r\n        if (col >= this.width) {\r\n            throw new Error('Index out of bounds');\r\n        }\r\n        if (vec.length != this.width) {\r\n            console.warn(`Length are not equal`);\r\n        }\r\n\r\n        if (k) {\r\n            vec = vec.map(v => v.mul(k));\r\n        }\r\n        for (let i = 0, l = Math.min(this.width, vec.length); i < l; i++) {\r\n            this.matrix[i][col] = this.matrix[i][col].add(vec[i]);\r\n        }\r\n    }\r\n\r\n    mulRow(row: number, vec: FractionType[]) {\r\n        if (row >= this.height) {\r\n            throw new Error('Index out of bounds');\r\n        }\r\n        if (vec.length != this.width) {\r\n            console.warn(`Length are not equal`);\r\n        }\r\n\r\n        for (let i = 0, l = Math.min(this.width, vec.length); i < l; i++) {\r\n            this.matrix[row][i] = this.matrix[row][i].mul(vec[i]);\r\n        }\r\n    }\r\n\r\n    eachRow(row, func: (cur: FractionType, index: number, stop?) => FractionType | number, begin?: number) {\r\n        let br = false;\r\n        if (row >= this.height) {\r\n            throw new Error('Index out of bounds');\r\n        }\r\n        function stop() {\r\n            br = true;\r\n        }\r\n\r\n        for (let i = begin || 0, l = this.height; i < l; i++) {\r\n            let tmp = func(this.matrix[row][i], i, stop);\r\n            if (br) {\r\n                break;\r\n            } else {\r\n                if (typeof tmp == \"number\") {\r\n                    this.matrix[row][i] = new Fraction(tmp);\r\n                } else if (tmp instanceof Fraction) {\r\n                    this.matrix[row][i] = tmp as FractionType;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    each(func: (cur: FractionType[], index: number, stop?) => FractionType[]) {\r\n        let br = false;\r\n        function stop() {\r\n            br = true;\r\n        }\r\n\r\n        for (let i = 0, l = this.height; i < l; i++) {\r\n            let tmp = func(this.matrix[i], i, stop);\r\n            if (br) {\r\n                break;\r\n            } else {\r\n                if (tmp != null) {\r\n                    this.matrix[i] = new Fraction(tmp);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    gauss(debug: boolean) {\r\n        const height = this.matrix.length;\r\n        const width = this.matrix[0].length;\r\n        let tmp;\r\n        if (debug) {\r\n            this.debugMatrix = new DebugMatrix();\r\n        }\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            let el = this.matrix[i][i];\r\n            if (el.n == 0) {\r\n                if (debug) {\r\n                    this.debugMatrix.add(`${i} == 0`);\r\n                }\r\n                for (let j = i + 1; j < height; j++) {\r\n                    el = this.matrix[j][i];\r\n                    if (el.n != 0) {\r\n                        if (debug) {\r\n                            this.debugMatrix.add(\r\n                                `[${i}]${arrFractionToStr(this.matrix[i])}`\r\n                                + ` + ${arrFractionToStr(this.matrix[j])}[${j}]`);\r\n                        }\r\n\r\n                        for (let k = 0; k < width; k++) {\r\n                            this.matrix[i][k].add(this.matrix[j][k]);\r\n                        }\r\n\r\n                        if (debug) {\r\n                            this.debugMatrix.past(this.clone());\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (el.n != 0) {\r\n                // делим i строку на el\r\n                if (debug) {\r\n                    this.debugMatrix.add(`${i} != 0`);\r\n                }\r\n                for (let j = 0; j < width; j++) {\r\n                    this.matrix[i][j] = this.matrix[i][j].div(el);\r\n                }\r\n                el = new Fraction(1);\r\n\r\n                // делим последующие строки после i-ой так, чтобы в столбце i были нули\r\n                for (let j = i + 1; j < height; j++) {\r\n                    let c = this.matrix[j][i].neg().div(el);\r\n                    if (c.n == 0) {\r\n                        break;\r\n                    }\r\n\r\n                    if (debug) this.debugMatrix.add(\r\n                        `[${j}]${arrFractionToStr(this.matrix[j])} + ${c.toFraction()}`\r\n                        +` * ${arrFractionToStr(this.matrix[i])}[${i}]`\r\n                    );\r\n\r\n                    for (let k = width - 1; k >= i; k--) {\r\n                        tmp = c.mul(this.matrix[i][k]);\r\n                        this.matrix[j][k] = this.matrix[j][k].add(tmp);\r\n                    }\r\n\r\n                    if (debug) {\r\n                        this.debugMatrix.past(this.clone());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    gaussSelect(debug: boolean, columns: number[]) {\r\n        let rows = [];\r\n        const {height, width} = this;\r\n        let tmp;\r\n        if (debug) {\r\n            this.debugMatrix = new DebugMatrix();\r\n        }\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            if (i > columns.length - 1) {\r\n                break;\r\n            }\r\n            let column = columns[i];\r\n\r\n            let el = this.matrix[i][column];\r\n            if (el.n == 0) {\r\n                for (let j = i + 1; j < height; j++) {\r\n                    el = this.matrix[j][i];\r\n                    if (el.n != 0) {\r\n                        if (debug) {\r\n                            this.debugMatrix.add(\r\n                                `[${i}]${arrFractionToStr(this.matrix[i])}`\r\n                                + ` + ${arrFractionToStr(this.matrix[j])}[${j}]`);\r\n                        }\r\n\r\n                        for (let k = 0; k < width; k++) {\r\n                            this.matrix[i][k].add(this.matrix[j][k]);\r\n                        }\r\n\r\n                        if (debug) {\r\n                            this.debugMatrix.past(this.clone());\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (el.n != 0) {\r\n                rows.push(i);\r\n\r\n                // делим i строку на el\r\n                for (let j = 0; j < width; j++) {\r\n                    this.matrix[i][j] = this.matrix[i][j].div(el);\r\n                }\r\n                el = new Fraction(1);\r\n\r\n                // делим строки после i-ой так, чтобы в столбце i были нули\r\n                for (let row = i + 1; row < height; row++) {\r\n                    let k = this.matrix[row][column].neg().div(el);\r\n                    if (k.n == 0) {\r\n                        break;\r\n                    }\r\n\r\n                    if (debug) this.debugMatrix.add(\r\n                        `[${row}]${arrFractionToStr(this.matrix[row])} + ${k.toFraction()}`\r\n                        +` * ${arrFractionToStr(this.matrix[i])}[${i}]`\r\n                    );\r\n\r\n                    for (let col = 0; col < width; col++) {\r\n                        tmp = k.mul(this.matrix[i][col]);\r\n                        this.matrix[row][col] = this.matrix[row][col].add(tmp);\r\n                    }\r\n\r\n                    if (debug) {\r\n                        this.debugMatrix.past(this.clone());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.debugMatrix.add(function() {\r\n            let msg = rows + ' ' + columns;\r\n            console.warn(msg);\r\n        });\r\n\r\n        this.log();\r\n        while (rows.length && columns.length) {\r\n            let numRow = rows.pop();\r\n            let numRol = columns.pop();\r\n            let workRow = this.matrix[numRow];\r\n\r\n            console.groupCollapsed(`[${numRow}][${numRol}]`);\r\n\r\n            for (let i = 0; i < height; i++) {\r\n                if (i == numRow || this.matrix[i][numRol].n == 0) {\r\n                    continue;\r\n                }\r\n                if (workRow[numRol].equals(0) == true) {\r\n                    throw new Error('неверное опорное решение');  // fixme\r\n                }\r\n\r\n                let iRow = this.matrix[i];\r\n                let k = iRow[numRol].div(workRow[numRol]);\r\n\r\n                if (debug ) {\r\n                    console.warn(`[${i}]${arrFractionToStr(iRow)} - ${k}*${arrFractionToStr(workRow)}`);\r\n                }\r\n\r\n                for (var col = 0; col < width; col++) {\r\n                    iRow[col] = iRow[col].sub(workRow[col].mul(k));\r\n                }\r\n\r\n                if (debug) {\r\n                    this.log();\r\n                }\r\n            }\r\n            console.groupEnd();\r\n        }\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Вставляет строку в конец, обновляет высоту \r\n     * @param row\r\n     */\r\n    pushRow(row: FractionType[]) {\r\n        this.matrix.push(row);\r\n        this.height = this.matrix.length;\r\n    }\r\n\r\n    /**\r\n     * Удаляет колонку, обновляет ширину\r\n     * @param col\r\n     */\r\n    removeCol(col: number) {\r\n        for (let i = 0; i < this.height; i++) {\r\n            let arr = [];\r\n            for (var j = 0; j < this.width; j++) {\r\n                if (col == j) continue;\r\n                arr.push(this.matrix[i][j]);\r\n            }\r\n            this.matrix[i] = arr;\r\n        }\r\n        this.width -= 1;\r\n    }\r\n    \r\n    equals(matrix: MatrixM): boolean {\r\n        if (this.height != matrix.height || this.width != matrix.width) {\r\n            return false;\r\n        }\r\n        let {width, height} = this;\r\n        for (let i = 0; i < height; i++) {\r\n            for (let j = 0; j < width; j++) {\r\n                if (!this.matrix[i][j].equals(matrix[i][j])) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    clone(): MatrixM {\r\n        let matrix = [];\r\n        this.matrix.forEach((r, i) => {\r\n            matrix.push([]);\r\n            r.forEach(e => {\r\n                matrix[i].push(e.clone());\r\n            })\r\n        });\r\n        return new MatrixM(matrix);\r\n    }\r\n\r\n    toString() {\r\n        let buf = '';\r\n        this.matrix.forEach(row => {\r\n            let str = '[';\r\n            row.forEach(el => {\r\n                str += '\\t' + el.toFraction();\r\n            });\r\n            buf += str + ']\\n';\r\n        });\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * Печатает матрицу в консоль\r\n     */\r\n    log() {\r\n        let m = [];\r\n        this.matrix.forEach((row, i) => {\r\n            m.push([]);\r\n            row.forEach((el: FractionType) => {\r\n                if (el.d == 1) {\r\n                    m[i].push(+el.toFraction());\r\n                } else {\r\n                    m[i].push(el.toFraction());\r\n                }\r\n            });\r\n        });\r\n        console.table(m);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}