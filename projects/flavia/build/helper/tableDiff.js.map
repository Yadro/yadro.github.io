{"version":3,"sources":["helper/tableDiff.ts"],"names":[],"mappings":";;IACA;;OAEG;IACH;QAMI;;;;;;WAMG;QACH,mBAAY,IAA2B,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;YAZpD,MAAC,GAAG,EAAE,CAAC;YACP,MAAC,GAAG,EAAE,CAAC;YACP,UAAK,GAAe,EAAE,CAAC;YAWnB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACT,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC9B,CAAC;YACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC,IAAE,CAAC,EAAE,CAAC;gBACvC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;YACI,cAAC,CAAS;YAEf,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBACjC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAEpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACT,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC/C,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxC,CAAC;oBACD,QAAQ,CAAC;gBACb,CAAC;gBAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;oBACnD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxE,CAAC;YACL,CAAC;QACL,CAAC;QAED;;;;;WAKG;QACH,4BAAQ,GAAR,UAAS,CAAC,EAAE,CAAC;YACT,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,CAAC;QAED,4BAAQ,GAAR;YACI,OAAO,CAAC,KAAK,CAAC;gBACV,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,CAAC,EAAE,IAAI,CAAC,CAAC;aACZ,CAAC,CAAC;YACH,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;QACL,gBAAC;IAAD,CAzDA,AAyDC,IAAA;IAzDY,iBAAS,YAyDrB,CAAA","file":"helper/tableDiff.js","sourcesContent":["\n/**\n * Таблица конечных разностей вперёд\n */\nexport class TableDiff {\n    x = [];\n    y = [];\n    delta: number[][] = [];\n    start: number;\n\n    /**\n     * Конструктор\n     * @param func функция\n     * @param start пределы\n     * @param h шаг\n     * @param n максималный порядок конечн разности\n     */\n    constructor(func: (x: number) => number, start, h, n) {\n        if (h <= 0) {\n            throw new Error('h <= 0');\n        }\n        this.start = start;\n        for (let x = start; x <= start + n; x+=h) {\n            this.x.push(x);\n            this.y.push(func(x));\n        }\n        let {y} = this;\n\n        for (let i = 0; i < start + n; i++) {\n            this.delta.push([]);\n\n            if (i == 0) {\n                for (let k = 0, len = y.length - 1; k < len; k++) {\n                    this.delta[i].push(y[k + 1] - y[k]);\n                }\n                continue;\n            }\n\n            for (let k = 0, len = y.length - i - 1; k < len; k++) {\n                this.delta[i].push(this.delta[i - 1][k + 1] - this.delta[i - 1][k]);\n            }\n        }\n    }\n\n    /**\n     * Возвращает значение вида Δ^k*y_p\n     * @param k\n     * @param p\n     * @returns {number}\n     */\n    getDelta(k, p) {\n        return this.delta[-this.start + k][p];\n    }\n\n    toString() {\n        console.table({\n            x: this.x,\n            y: this.y,\n        });\n        console.table(this.delta);\n    }\n}"],"sourceRoot":"/source/"}