{"version":3,"sources":["helper/graph_polynom.ts"],"names":[],"mappings":"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","file":"helper/graph_polynom.js","sourcesContent":["///<reference path=\"../../typings/main.d.ts\"/>\nimport * as Snap from '../../node_modules/snapsvg/dist/snap.svg';\n\nexport class GraphPolynom {\n    lineStyle = {\n        stroke: '#000',\n        strokeWidth: 1\n    };\n    lineStyle2 = {\n        stroke: '#0f0',\n        opacity: 0,\n        strokeWidth: 10\n    };\n    fontAxisY = {\n        fontFamily: 'Source Sans Pro',\n        textAnchor: 'middle'\n    };\n    fontAxisX = {\n        fontFamily: 'Source Sans Pro',\n        textAnchor: 'middle'\n    };\n    padding = 60;\n\n    paper: Snap.Paper;\n    sizeSvg = [800, 600];\n\n    start: number[];\n    sizeCell: number[];\n\n    sizeW: {\n        a\n        b\n        c\n        d\n    };\n\n    func: Function[];\n\n    extremum: number[] = [-10, 10, -10, 10, -10, 10];\n    segment = 30;\n\n    constructor(id, func: Function[], size) {\n        this.paper = Snap(id || 'svg');\n        this.func = func;\n        this.sizeW = size;\n\n        this.calc();\n\n        this.drawAxis();\n\n        func.forEach(f => {\n            this.drawGraphics(f);\n        });\n    }\n\n    calc() {\n        /*let extr;\n         this.extremum = extr = this.getExtremum();\n\n         // определяем размер сегмента\n         this.count = extr[5] - extr[4];\n         this.size = Math.min(this.sizeSvg[0], this.sizeSvg[1]) - this.padding;\n         this.segment = this.size / this.count;\n\n         // считаем начало координат\n         let x_min = extr[0],\n         x_max = extr[1],\n         y_min = extr[2],\n         y_max = extr[3];\n         let graphW = (x_max - x_min) * this.segment,\n         graphH = (y_max - y_min) * this.segment;\n\n         this.start = [\n         this.sizeSvg[0] / 2 - graphW / 2 - x_min * this.segment,\n         this.sizeSvg[1] / 2 - graphH / 2 + y_max * this.segment\n         ];*/\n\n        // определяем размер сегмента по X и Y\n        this.sizeCell = [\n            (this.sizeSvg[0] - this.padding) / (-this.sizeW.a + this.sizeW.b),\n            (this.sizeSvg[1] - this.padding) / (-this.sizeW.c + this.sizeW.d)\n        ];\n\n        // начало координат\n        this.start = [\n            -this.sizeW.a * this.sizeCell[0],\n            -this.sizeW.c * this.sizeCell[1]\n        ];\n    }\n\n    /**\n     * Отрисовка осей координат\n     */\n    drawAxis() {\n        let paper = this.paper,\n            sizeW = this.sizeW;\n\n        let startX = -sizeW.a * this.sizeCell[0] + (this.padding/2),\n            startY = -sizeW.c * this.sizeCell[1] + (this.padding/2);\n\n        paper.line(startX, 0, startX, this.sizeSvg[1]).attr(this.lineStyle);\n        paper.line(0, startY, this.sizeSvg[0], startY).attr(this.lineStyle);\n\n        for (let k = 0; k < 2; k++) {\n            let border = k ?\n                [this.sizeW.c, this.sizeW.d] :\n                [this.sizeW.a, this.sizeW.b];\n\n            let pass = GraphPolynom.getsize(this.sizeCell[k % 2]);\n\n            for (let i = border[0]; i <= border[1]; i++) {\n                if (pass && i % pass) {\n                    // пропускаем деления, если маленький масштаб\n                    continue;\n                }\n\n                // координаты делений на осях\n                let localX = k ? startX : startX + i * this.sizeCell[0];\n                let localY = k ? startY + i * this.sizeCell[1] : startY;\n\n                if (k) {\n                    if (i != 0) {\n                        paper.text(localX - 15, localY + 5, \"\" + i)\n                            .attr(this.fontAxisY);\n                    }\n                    paper.line(localX, localY, localX - 5, localY)\n                        .attr(this.lineStyle);\n                } else {\n                    if (i != 0) {\n                        paper.text(localX, localY + 20, \"\" + i)\n                            .attr(this.fontAxisX);\n                    }\n                    paper.line(localX, localY, localX, localY + 5)\n                        .attr(this.lineStyle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Расчет количества отображаемых делений\n     * @param size\n     * @returns {number}\n     */\n    static getsize(size: number) {\n        let pass = 0;\n        if (size < 25) {\n            pass = 2;\n            if (size < 18) {\n                pass = 3;\n            }\n            if (size < 15) {\n                pass = 4;\n            }\n            if (size < 10) {\n                pass = 5;\n            }\n            if (size < 7) {\n                pass = 8;\n            }\n            if (size < 5) {\n                pass = 10;\n            }\n            if (size < 4) {\n                pass = 20;\n            }\n        }\n        return pass;\n    }\n\n    /**\n     * Отрисовка графиков\n     */\n    drawGraphics(func) {\n        //let step = (this.sizeW.a + this.sizeW.b) / 800;\n\n        let last = [0,0];\n\n        for (let i = this.sizeW.a; i < this.sizeW.b; i += .1) {\n            let coord = [];\n            coord[0] = last[0];\n            coord[1] = last[1];\n            let x = coord[2] = i;\n            let y = coord[3] = func(i);\n\n            let sign = 1;\n            coord = coord.map((p, i) => {\n                sign = (i % 2) ? -1 : 1; // invert axisY\n                return this.start[i % 2] + p * this.sizeCell[i % 2] * sign + this.padding / 2;\n            });\n\n            let line = this.paper.line(coord[0], coord[1], coord[2], coord[3])\n                .attr(this.lineStyle);\n\n            /*this.paper.line(coord[0], coord[1], coord[2], coord[3])\n                .attr(this.lineStyle2)\n                .hover((e) => {\n                    line.attr({stroke: '#f00'});\n                }, (e) => {\n                    line.attr(this.lineStyle);\n                });*/\n\n            last[0] = x;\n            last[1] = y;\n        }\n    }\n\n    addGraphic(f: Function) {\n        this.func.push(f);\n        this.drawGraphics(f);\n    }\n\n    updateGraphics(func: Function[], size) {\n        this.func = func;\n        this.sizeW = {\n            a: size.a != void 0 ? size.a : -10,\n            b: size.b != void 0 ? size.b : 10,\n            c: size.c != void 0 ? size.c : -10,\n            d: size.d != void 0 ? size.d : 10,\n        };\n\n        this.calc();\n\n        this.paper.clear();\n        this.drawAxis();\n\n        func.forEach(f => {\n            this.drawGraphics(f);\n        });\n    }\n}"],"sourceRoot":"/source/"}